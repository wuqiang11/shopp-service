package com.shopping.util;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import javax.servlet.http.HttpServletRequest;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class StringUtil {
	/** The Constant HASH_TYPE_MD5. */
	public static final String HASH_TYPE_MD5 = "MD5";
	/** The Constant HASH_TYPE_SHA1. */
	public static final String HASH_TYPE_SHA1 = "SHA-1";
	/** The Constant PY_PREFIX. */
	private static final String

	public static final Pattern p = Pattern.compile("\\s*|\t*|\r*|\n*");

	/**
	 * 用于替换换行符的HTML BR String<br>
	 * 括号和BR之间不能有其他内容,否则IE不会表示为换行<br>
	 * Notice:如果需要修改这个常量定义,必须相应修改ISO_8859_1.java 中的Filter 定义
	 */
	private static final String BR_FOR_NEW_LINE = "<Br />";

	/**
	 * 如果对象Null或"null"返回空字符串.
	 * 
	 * @param obj
	 *            需要toString的对象
	 * @return string 返回非空的字符串
	 */
	public static String notNull(Object obj) {
		return notNull(obj, false);
	}

	/**
	 * Not null.
	 * 
	 * @param obj
	 *            the obj
	 * @param stutas
	 *            the stutas 是否严格校验 "null"字符串
	 * @return the string
	 */
	public static String notNull(Object obj, boolean stutas) {
		String strString = "";
		if (obj != null) {
			if (stutas) {
				strString = obj.toString();
			} else {
				strString = obj.toString().trim();
				if ("null".equals(strString)) {
					return "";
				}
			}
		}
		return strString;
	}

	/**
	 * Checks if is empty.
	 * 
	 * @param str
	 *            the str
	 * @return true, if is empty
	 */
	public static boolean isEmpty(Object str) {
		return str == null || str.toString().isEmpty();
	}

	/**
	 * Checks if is not empty.
	 * 
	 * @param str
	 *            the str
	 * @return true, if is not empty
	 */
	public static boolean isNotEmpty(Object str) {
		return !StringUtil.isEmpty(str);
	}

	/**
	 * 方法定义：toBoolean<br>
	 * 用途说明： 将字符串y|yes|true|1 转换成true否则false<br>
	 * 例如：toBoolean("y") 返回true.
	 * 
	 * @param theString
	 *            需要判断的字符串
	 * @return boolean 返回布尔值true|false
	 */
	public static boolean toBoolean(String theString) {
		if (theString == null) {
			return false;
		}
		theString = theString.trim();
		if ("y".equalsIgnoreCase(theString)
				|| "yes".equalsIgnoreCase(theString)
				|| "true".equalsIgnoreCase(theString)
				|| "1".equalsIgnoreCase(theString)) {
			return true;
		}
		return false;
	}

	public static boolean isNull(Object obj) {
		if (obj != null) {
			String str = obj.toString().trim();
			return str.isEmpty() || "null".equals(str.toLowerCase());
		} else {
			return true;
		}
	}

	public static boolean isEmptyString(Object obj) {
		if (obj != null&&!"null".equals(obj.toString().trim())) {
			String str = obj.toString().trim();
			
			return str.isEmpty() ;
		} else {
			return false;
		}
	}
	/* 非空判断 */
	public static String returnNotNull(String temp) {

		if (null == temp || ("").equals(temp)) {
			return "";
		} else {
			return temp.trim();
		}
	}

	/**
	 * 处理字符串空值 nvl
	 * 
	 * @param s
	 * @return
	 */
	public static String nvl(String s) {
		return nvl(s, "");
	}

	/**
	 * 带默认值处理字符串空值 nvl
	 * 
	 * @param s
	 * @param defaultValue
	 * @return
	 */
	public static String nvl(String s, String defaultValue) {
		if (s == null || "".equals(s) || "null".equals(s)) {
			s = defaultValue;
		}
		return s;
	}

	/**
	 * 将字符串按指定加密类型加密支持MD5 SHA-1.
	 * 
	 * @param data
	 *            需要Hash的字符串
	 * @param type
	 *            加密类型 （"MD5" or "SHA-1"）
	 * @return 返回的加密字串，SHA1是产生一个20字节的二进制数组
	 */
	public static synchronized String hashKey(String data, String type) {
		MessageDigest digest = null;
		if (digest == null) {
			try {
				digest = MessageDigest.getInstance(type);
			} catch (NoSuchAlgorithmException nsae) {
				System.err.println("Failed to load the MD5 MessageDigest. ");
			}
		}
		digest.update(data.getBytes());
		return byteToHex(digest.digest());
	}

	/**
	 * 字符串不能为"" 或 null 如果是则返回异常.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            是null或空白时,相应的错误提示信息
	 * @throws IllegalArgumentException
	 *             是一个RuntimeException运行时异常不强制捕获异常，如果需要时可以主动捕获异常。
	 */
	public static void assertNotBlank(String theString, String theMessage) {
		if (theString == null) {
			throw new IllegalArgumentException("Null argument not allowed: "
					+ theMessage);
		}
		if ("".equals(theString.trim())) {
			throw new IllegalArgumentException("Blank argument not allowed: "
					+ theMessage);
		}
	}

	/**
	 * 判断指定的String是否为一个Integer 整数.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            不是number时,相应的错误提示信息
	 * @return the int
	 * @throws IllegalArgumentException
	 *             如果表示number,则throw 此exception,
	 * @see #assertNotBlank(String,String)
	 */
	public static int assertInteger(String theString, String theMessage) {
		assertNotBlank(theString, theMessage);
		try {
			int result = Integer.parseInt(theString);
			return result;
		} catch (NumberFormatException e) {
			throw new IllegalArgumentException("[" + theString
					+ "]is not a integer value." + theMessage);
		}
	}

	/**
	 * 获取字符32位字符串的UUID（唯一）.
	 * 
	 * @return the UUID
	 */
	public static String getUUID() {
		String uuid = UUID.randomUUID().toString();
		return uuid.replaceAll("-", "");
	}

	/**
	 * 获取UUID的HashCode.
	 *
	 * @return the uUID hash code
	 */
	public static long getUUIDHashCode() {
		return getUUID().hashCode();
	}

	/**
	 * 获取Long型的UUID（唯一）.
	 *
	 * @return the UUID least bits
	 */
	public static long getUUID2Long2() {
		return UUID.randomUUID().getLeastSignificantBits() * -1;
	}

	/**
	 * 判断指定的String是否为一个boolean.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            不是boolean时,相应的错误提示信息
	 * @throws IllegalArgumentException
	 *             如果表示boolean,则throw 此exception,
	 * @see #assertNotBlank(String,String)
	 */
	public static void assertBoolean(String theString, String theMessage) {
		assertNotBlank(theString, theMessage);
		if (!("yes".equalsIgnoreCase(theString)
				|| "true".equalsIgnoreCase(theString)
				|| "no".equalsIgnoreCase(theString)
				|| "false".equalsIgnoreCase(theString)
				|| "y".equalsIgnoreCase(theString) || "n"
					.equalsIgnoreCase(theString))) {
			throw new IllegalArgumentException("[" + theString
					+ "]is not a boolean value." + theMessage);
		}
	}

	/**
	 * 用于把Request para 的encoding <br>
	 * 从缺省的ISO8859-5 转换为指定的Encoding.
	 * 
	 * @param value
	 *            the value
	 * @param newEncoding
	 *            , if = null, default set to "GBK"
	 * @return 做过Encoding变换的String
	 * @history 2004/06/25 getBytes的时候应该指定用ISO-8859-1
	 */
	public static String convertEncoding(String value, String newEncoding) {
		if (value == null) {
			return "";
		}
		if (newEncoding == null) {
			newEncoding = "GBK";
		}
		try {
			return new String(value.getBytes("ISO-8859-1"), newEncoding);
		} catch (java.io.UnsupportedEncodingException use) {
			return use.toString();
		}
	}

	/**
	 * 字节数组转换为十六进制字符串.
	 * 
	 * @param hash
	 *            需要转换的字节数组
	 * @return 返回的十六进制字符串
	 */
	public static String byteToHex(byte hash[]) {
		StringBuffer buf = new StringBuffer(hash.length * 2);
		int i;
		for (i = 0; i < hash.length; i++) {
			if (((int) hash[i] & 0xff) < 0x10) {
				buf.append("0");
			}
			buf.append(Long.toString((int) hash[i] & 0xff, 16));
		}
		return buf.toString();
	}

/**
     * 对字符串进行处理，使得它能够在HTML页面上进行正常表示 <br />
     * 具体转换的内容是： <table border="1">
     * <tr>
     * <td>原内容</td>
     * <td>转换后</td>
     * </tr>
     * <tr>
     * <td>"<" </td>
     * <td>"&amp;lt;" </td>
     * </tr>
     * <tr>
     * <td>">" </td>
     * <td>"&amp;gt;" </td>
     * </tr>
     * <tr>
     * <td>"&" </td>
     * <td>"&amp;amp;" </td>
     * </tr>
     * <tr>
     * <td>"\"' </td>
     * <td>"&amp;quot;" </td>
     * </tr>
     * <tr>
     * <td>"\r" </td>
     * <td> "&lt;BR&gt;"</td>
     * </tr>
     * <tr>
     * <td>"\n" </td>
     * <td>"&lt;BR&gt;" </td>
     * </tr>
     * <tr>
     * <td>"\t" </td>
     * <td>4个Space </td>
     * </tr>
     * <tr>
     * <td>Space </td>
     * <td>"&amp;nbsp;" </td>
     * </tr>
     * </table>.
     * 
     * @param value 目标字符串
     * @return 返回字符串
     */
	public static String filter(String value) {
		if (value == null) {
			return null;
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < value.length(); i++) {
			char ch = value.charAt(i);
			if (ch == '<') {
				result.append("&lt;");
			} else if (ch == '>') {
				result.append("&gt;");
			} else if (ch == '&') {
				result.append("&amp;");
			} else if (ch == '"') {
				result.append("&quot;");
			} else if (ch == '\r') {
				result.append("<BR>");
			} else if (ch == '\n') {
				if (i > 0 && value.charAt(i - 1) == '\r') {
				} else {
					result.append("<BR>");
				}
			} else if (ch == '\t') {
				result.append("&nbsp;&nbsp;&nbsp;&nbsp");
			} else if (ch == ' ') {
				result.append("&nbsp;");
			} else {
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * 对目前的支持Word联动的HTML编辑器的Filter功能.
	 * 
	 * @param value
	 *            the value
	 * @return String
	 */
	public static String filterForHtmlEditor(String value) {
		if (value == null) {
			return null;
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < value.length(); i++) {
			char ch = value.charAt(i);
			if (ch == '\r') {
				result.append("");
			} else if (ch == '\n') {
				if (i > 0 && value.charAt(i - 1) == '\r') {
				} else {
					result.append("");
				}
			} else if (ch == '\t') {
				result.append("    ");
			} else {
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * 数字转换成字母.
	 * 
	 * @param number
	 *            the number
	 * @param upperCaseFlag
	 *            大小写标示
	 * @return java.lang.String
	 * @throws Exception
	 *             the exception
	 */
	public static String numberToLetter(int number, boolean upperCaseFlag)
			throws Exception {
		// add nine to bring the numbers into the right range (in java, a= 10, z
		// = 35)
		if (number < 1 || number > 26) {
			throw new Exception("The number is out of the proper range (1 to "
					+ "26) to be converted to a letter.");
		}
		int modnumber = number + 9;
		char thechar = Character.forDigit(modnumber, 36);
		if (upperCaseFlag) {
			thechar = Character.toUpperCase(thechar);
		}
		return "" + thechar;
	}

	/**
	 * 取得汉字拼音的首字母.
	 * 
	 * @param strCn
	 *            the str cn
	 * @return the PY prefix
	 */
	public static String getPYPrefix(String strCn) {
		if (strCn == null || strCn.trim().length() == 0) {
			return "";
		}
		String ret = "";
		for (int i = 0; i < strCn.length(); i++) {
			char ch = strCn.charAt(i);
			if ('\u4E00' <= ch && ch <= '\u9FA5') {
				ret = ret + PY_PREFIX.charAt(ch - 19968);
			} else {
				ret = ret + ch;
			}
		}
		return ret;
	}

	/**
	 * 字符串转换成整数.
	 * 
	 * @param value
	 *            the value
	 * @return the integer
	 */
	public static Integer string2Integer(String value) {
		if (value != null && value.length() > 0) {
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag) {
				return Integer.valueOf(value);
			} else {
				throw new NumberFormatException();
			}
		} else {
			return null;
		}
	}

	/**
	 * 字符串转换成长整数.
	 * 
	 * @param value
	 *            the value
	 * @return the long
	 */
	public static Long string2Long(String value) {
		if (value != null && value.length() > 0) {
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag) {
				return Long.valueOf(value);
			} else {
				throw new NumberFormatException();
			}
		} else {
			return null;
		}
	}

	/**
	 * 字符串转换成小数.
	 * 
	 * @param value
	 *            the value
	 * @return the big decimal
	 */
	public static BigDecimal string2BigDecimal(String value) {
		if (value != null && value.length() > 0) {
			boolean flag = Pattern.matches("-?[0-9]+(.[0-9]+)?", value);
			if (flag) {
				return new BigDecimal(value);
			} else {
				throw new NumberFormatException();
			}
		} else {
			return null;
		}
	}

	/**
	 * 字符串转换成短整数.
	 * 
	 * @param value
	 *            the value
	 * @return the short
	 */
	public static Short string2Short(String value) {
		if (value != null && value.length() > 0) {
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag) {
				return Short.valueOf(value);
			} else {
				throw new NumberFormatException();
			}
		} else {
			return null;
		}
	}

	/**
	 * 字符串转换成短整数.
	 * 
	 * @param value
	 *            the value
	 * @return the byte[]
	 */
	public static byte[] string2Blob(String value) {
		if (value != null && value.length() > 0) {
			return value.getBytes();
		} else {
			return null;
		}
	}

	/**
	 * To string.
	 * 
	 * @param object
	 *            object
	 * @return string
	 */
	public static String toString(Object object) {
		String value = String.valueOf(object);
		if ("null".equals(value)) {
			return null;
		}
		return value;
	}

	/**
	 * 特殊字符转义.
	 * 
	 * @param specialCharacters
	 *            包含特殊字符的字符串
	 * @return 返回转义后的字符串
	 */
	public static String escapeSpecialCharacters(String specialCharacters) {
		return specialCharacters.replaceAll(Pattern.quote("\\"), "\\\\\\\\")
				.replaceAll("%", "\\\\%").replaceAll("_", "\\\\_");
	}

	/**
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isNullOrEmpty(String str) {
		if (str == null || "".equals(str.trim())) {
			return true;
		}
		return false;
	}

	/**
	 * 对字符串进行Cleanup操作
	 * 
	 * @param input
	 * @return
	 */
	public static String clean(String input) {
		return input == null || "null".equals(input) ? "" : input.trim();
	}

	/**
	 * 除去字符串后面的0
	 * @param input
	 * @return
	 */
	public static String cleanZero(String input) {
		while (input.lastIndexOf("000") % 3 == 0) {
			input = input.substring(0, input.length() - 3);
		}
		return input;
	}
	
	
	public static boolean isChinese(char c) {  
	 Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);  
	 if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS  
	     || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS  
	     || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A  
	     || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION  
	     || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION  
	     || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {  
	   return true;  
	 }  
	 return false;  
	}

	public static boolean isMessyCode(String strName) {
		 Matcher m = p.matcher(strName);
		 String after = m.replaceAll("");  
		 String temp = after.replaceAll("\\p{P}", "");  
		 char[] ch = temp.trim().toCharArray();  
		 float chLength = ch.length;  
		 float count = 0;  
		 for (int i = 0; i < ch.length; i++) {  
		   char c = ch[i];  
		   if (!Character.isLetterOrDigit(c)) {  
		
		     if (!isChinese(c)) {  
		       count = count + 1;  
		       System.out.print(c);  
		     }  
		   }  
		 }  
		 float result = count / chLength;  
		 if (result > 0.4) {  
		   return true;  
		 } else {  
		   return false;  

	
	 }
	}
	/**
	 * 
	 * string 转 map
	 * 
	 * @author ygm
	 * @date 2016年11月30日
	 * @param str={"system":"11","gameDuanq":"11"}
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public static Map stringTurnMap(String str) {
		Map<String, String> mapStr = new HashMap<String, String>();
		String[] arrSplit = null;
		if (str == null) {
			return mapStr;
		}
		str = str.substring(1, str.length() - 1);
		arrSplit = str.split(",");
		// 每个键值为一组
		for (String strSplit : arrSplit) {
			String[] arrSplitEqual = null;
			arrSplitEqual = strSplit.split(":");
			// 解析出键值
			if (arrSplitEqual.length > 1) {
				// 正确解析
				mapStr.put(arrSplitEqual[0].substring(1, arrSplitEqual[0].length() - 1),
						arrSplitEqual[1].substring(1, arrSplitEqual[1].length() - 1));
			} else {
				if (!"".equals(arrSplitEqual[0])) {
					// 只有参数没有值，不加入
					mapStr.put(arrSplitEqual[0].substring(1, arrSplitEqual[0].length() - 1), "");
				}
			}
		}
		return mapStr;
	}

	/**
	 * 去除字符串首尾出现的某个字符.
	 * 
	 * @param source  ygm
	 *            源字符串.
	 * @param element
	 *            需要去除的字符.
	 * @return String.
	 */
	public String trimFirstAndLastChar(String source, char element) {
		boolean beginIndexFlag = true;
		boolean endIndexFlag = true;
		do {
			int beginIndex = source.indexOf(element) == 0 ? 1 : 0;
			int endIndex = source.lastIndexOf(element) + 1 == source.length() ? source
					.lastIndexOf(element) : source.length();
			source = source.substring(beginIndex, endIndex);
			beginIndexFlag = (source.indexOf(element) == 0);
			endIndexFlag = (source.lastIndexOf(element) + 1 == source.length());
		} while (beginIndexFlag || endIndexFlag);
		return source;
	}
	
	/**
	 * @author dy
	 * @return
	 */
	public static String join(Object[] array, char separator) {  
        if (array == null) {  
            return null;  
        }  
        int arraySize = array.length;  
        int bufSize = (arraySize == 0 ? 0 : ((array[0] == null ? 16 : array[0].toString().length()) + 1) * arraySize);  
        StringBuffer buf = new StringBuffer(bufSize);  
  
        for (int i = 0; i < arraySize; i++) {  
            if (i > 0) {  
                buf.append(separator);  
            }  
            if (array[i] != null) {  
                buf.append(array[i]);  
            }  
        }  
        return buf.toString();  
    }
	/***
	 * 去除数组中的空字符串
	 * @param array
	 * @return
	 */
	public   static  String[]  noNull(String[] array){
        List<String> tmp = new ArrayList<String>();  
        for(String str:array){  
            if(str!=null && !"".equals(str)){  
                tmp.add(str);  
            }  
        }  
        return tmp.toArray(new String[0]);  
	}
	
	/***
	 * 去除String类型的数组中的重复数据
	 * @param array
	 * @return
	 */
	public  static  String[]  removeRepeat(String[] array){
		List<String> list=new ArrayList<String>();
		for(int i=0;i<array.length;i++){
			if(!list.contains(array[i])){  //如果数组list不包含当前项，则加入到list
				list.add(array[i]);
			}
		}
		String[]  newStr=list.toArray(new String[1]);
		
		return  newStr;
	}
	/**
	 * map 转 json
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public  static  String  mapToJson(Map map){
		JSONObject jsonObject = JSONObject.fromObject(map);
		return  jsonObject.toString();
	}
	/**
	 * map 转 json
	 * @see [类、类#方法、类#成员]
	 */
	public  static  String  listToJson(List list){
		JSONArray jsonObject = JSONArray.fromObject(list);
		return  jsonObject.toString();
	}
	/**
	 * 
	 * 对象转json字符串 
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public  static  String  objectToJson(Object obj){
		 JSONObject object = JSONObject.fromObject(obj);
		return  object.toString();
	}
	/**
	 * 
	 * json转Map
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public  static  Map<String,String>  JsonToMap(String str){
		Map<String, String> map = new HashMap<String, String>();  
		JSONObject jsonMap = JSONObject.fromObject(str);
	    Iterator<String> it = jsonMap.keys();  
	    while(it.hasNext()) {  
	        String key = (String) it.next();
			String u = jsonMap.get(key).toString();
	        map.put(key, u);
	    }  
	    return map;    
	}
	/**
	 * 
	 * 获取当前的系统时间
	 * @see [类、类#方法、类#成员]
	 */
	public static String  getStringTime(){
		Date  date=new Date();
	    SimpleDateFormat  format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    String  time=format.format(date);
	    return time;
	 }

	/**
	 *
	 * 获取当前的系统时间
	 * @see [类、类#方法、类#成员]
	 */
	public static String  getStringTime2(){
		Date  date=new Date();
		SimpleDateFormat  format=new SimpleDateFormat("yyyy-MM-dd");
		String  time=format.format(date);
		return time;
	}

	/**
	 * 
	 * 获取当前的date时间
	 * @see [类、类#方法、类#成员]
	 */
	public static Date  getDateTime(){
	    return DateUtil.getDateTime();
	 }
	
	public static String getRandomSjbh() {
	  SimpleDateFormat simpleDateFormat;
	  simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
	  Date date = new Date();
	  String str = simpleDateFormat.format(date);
	  int rannum = (int)(Math.random()*(9999-1000+1))+1000;
	  return str+rannum;
	}
	/**
	 * 
	 * 生成六位随机数
	 * @see [类、类#方法、类#成员]
	 */
	public static String getRandomSixDate() {
		  int rannum = (int)(Math.random()*(999999-100000+1))+100000;
		  return ""+rannum;
	}
	/**
	 * 
	 * 生成si位随机数
	 * @see [类、类#方法、类#成员]
	 */
	public static String getRandomFourDate() {
		  int rannum = (int)(Math.random()*(9999-1000+1))+1000;
		  return ""+rannum;
	}
	
	/**
	 * 在date时间上加或减多少分钟
	 * @param date  要加的时间
	 * @param minute
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public static Date addTime(Date date,int minute) {
		Calendar rightNow = Calendar.getInstance();
	    rightNow.setTime(date);
	    rightNow.add(Calendar.MINUTE,minute);
	    return rightNow.getTime();
	}
	/**
	 * 在date时间上加或减多少天
	 * @return
	 * @see [类、类#方法、类#成员]
	 */
	public static Date addDate(Date date,int day) {
		Calendar rightNow = Calendar.getInstance();
	    rightNow.setTime(date);
	    rightNow.add(Calendar.DATE,day);
	    return rightNow.getTime();
	}
	/**
	 * 获取用户真实IP地址，不使用request.getRemoteAddr();的原因是有可能用户使用了代理软件方式避免真实IP地址,
	 *
	 * 可是，如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值，究竟哪个才是真正的用户端的真实IP呢？
	 * 答案是取X-Forwarded-For中第一个非unknown的有效IP字符串。
	 *
	 * 如：X-Forwarded-For：192.168.1.110, 192.168.1.120, 192.168.1.130,
	 * 192.168.1.100
	 *
	 * 用户真实IP为： 192.168.1.110
	 *
	 * @param request
	 * @return
	 */
	public static String getIpAddress(HttpServletRequest request) {
		String ip = request.getHeader("x-forwarded-for");
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("HTTP_CLIENT_IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("HTTP_X_FORWARDED_FOR");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		return ip.split(",")[0];
	}

	/**
	 * @param request
	 * @return [参数说明]
	 * @return Map<String,String> [返回类型说明]
	 * @exception throws [违例类型] [违例说明]
	 * @see [类、类#方法、类#成员]
	 */
	public static Map<String, String> getParam(HttpServletRequest request) {
		//获取支付宝POST过来反馈信息
		Map<String,String> params = new HashMap<String,String>();
		Map requestParams = request.getParameterMap();
		for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";
			}
			params.put(name, valueStr);
		}
		return params;
	}
}
